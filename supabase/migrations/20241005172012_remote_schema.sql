

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."mlog_likes" (
    "target_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."mlog_likes" OWNER TO "postgres";


COMMENT ON TABLE "public"."mlog_likes" IS 'likes of Articles';



ALTER TABLE "public"."mlog_likes" ALTER COLUMN "target_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."ArticleLikes_ArticleID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."mlogs" (
    "mlog_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "thumbnail_url" "text" NOT NULL,
    "info_1" "text",
    "info_2" "text",
    "type" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "deleted_at" timestamp with time zone,
    "likes" bigint DEFAULT '0'::bigint NOT NULL,
    "views" bigint DEFAULT '0'::bigint NOT NULL
);


ALTER TABLE "public"."mlogs" OWNER TO "postgres";


COMMENT ON TABLE "public"."mlogs" IS 'MetaData of Articles';



ALTER TABLE "public"."mlogs" ALTER COLUMN "mlog_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Article_ArticleID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."generals" (
    "general_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "content" "json" NOT NULL,
    "playlist_id" bigint,
    "image_urls" "json"
);


ALTER TABLE "public"."generals" OWNER TO "postgres";


COMMENT ON TABLE "public"."generals" IS 'Article type-General';



ALTER TABLE "public"."generals" ALTER COLUMN "general_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."General_ArticleID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."livereports" (
    "livereport_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "content" "json" NOT NULL,
    "playlist_id" bigint,
    "image_urls" "json"
);


ALTER TABLE "public"."livereports" OWNER TO "postgres";


COMMENT ON TABLE "public"."livereports" IS 'Article type-LiveReport';



ALTER TABLE "public"."livereports" ALTER COLUMN "livereport_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."LiveReport_LiveReportID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."playlist_musics" (
    "playlist_id" bigint NOT NULL,
    "music_id" "text" NOT NULL
);


ALTER TABLE "public"."playlist_musics" OWNER TO "postgres";


COMMENT ON TABLE "public"."playlist_musics" IS 'Songs in Playlist';



ALTER TABLE "public"."playlist_musics" ALTER COLUMN "playlist_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."PlaylistSongs_PlaylistID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."music_playlist" (
    "playlist_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "playlist_title" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."music_playlist" OWNER TO "postgres";


COMMENT ON TABLE "public"."music_playlist" IS 'Playlist in Articles';



ALTER TABLE "public"."music_playlist" ALTER COLUMN "playlist_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Playlist_PlaylistID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."posts" (
    "entry_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "content" "text" NOT NULL,
    "likes" integer DEFAULT 0 NOT NULL,
    "views" integer DEFAULT 0 NOT NULL,
    "image_urls" "json" DEFAULT '[]'::"json" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "deleted_at" timestamp with time zone
);


ALTER TABLE "public"."posts" OWNER TO "postgres";


COMMENT ON TABLE "public"."posts" IS 'Post and Comment';



ALTER TABLE "public"."posts" ALTER COLUMN "entry_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."PostAndComment_EntryID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."replies" (
    "entry_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "content" "text" NOT NULL,
    "likes" integer DEFAULT 0 NOT NULL,
    "views" integer DEFAULT 0 NOT NULL,
    "image_urls" "json",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "parent_post_id" bigint NOT NULL,
    "deleted_at" timestamp with time zone,
    "parent_reply_id" bigint
);


ALTER TABLE "public"."replies" OWNER TO "postgres";


COMMENT ON TABLE "public"."replies" IS 'Reply to Posts';



ALTER TABLE "public"."replies" ALTER COLUMN "entry_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Reply_EntryID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."reviews" (
    "review_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "body" "json" NOT NULL,
    "playlist_id" bigint,
    "image_urls" "json"
);


ALTER TABLE "public"."reviews" OWNER TO "postgres";


COMMENT ON TABLE "public"."reviews" IS 'Article type-Review';



ALTER TABLE "public"."reviews" ALTER COLUMN "review_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Review_LiveReportID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."todays" (
    "todays_song_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "music_id" character varying NOT NULL,
    "content" "text" NOT NULL,
    "likes" integer DEFAULT 0 NOT NULL,
    "views" integer DEFAULT 0 NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "deleted_at" timestamp with time zone
);


ALTER TABLE "public"."todays" OWNER TO "postgres";


COMMENT ON TABLE "public"."todays" IS 'Post of Today''s Song';



ALTER TABLE "public"."todays" ALTER COLUMN "todays_song_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Today'sSong_Today'sSongID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."artists" (
    "id" bigint NOT NULL,
    "musickit_id" character varying,
    "artist_name" character varying NOT NULL
);


ALTER TABLE "public"."artists" OWNER TO "postgres";


ALTER TABLE "public"."artists" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."artists_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."blocks" (
    "blocker_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "blocked_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."blocks" OWNER TO "postgres";


COMMENT ON TABLE "public"."blocks" IS 'Block and blocked users';



CREATE TABLE IF NOT EXISTS "public"."follows" (
    "follower_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "followed_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "status" character varying NOT NULL,
    "updated_at" timestamp with time zone,
    "followed_notified" boolean DEFAULT false NOT NULL,
    "follower_notified" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."follows" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."mlog_comments" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "target_id" bigint NOT NULL,
    "content" "text" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."mlog_comments" OWNER TO "postgres";


COMMENT ON TABLE "public"."mlog_comments" IS 'Comment to Articles';



CREATE TABLE IF NOT EXISTS "public"."notifications" (
    "notification_id" bigint NOT NULL,
    "content" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."notifications" OWNER TO "postgres";


ALTER TABLE "public"."notifications" ALTER COLUMN "notification_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."notifications_notification_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."playlists" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "content" "json" NOT NULL,
    "mlog_playlist_id" bigint NOT NULL,
    "image_urls" "json"
);


ALTER TABLE "public"."playlists" OWNER TO "postgres";


COMMENT ON TABLE "public"."playlists" IS 'Article type-Playlist';



CREATE TABLE IF NOT EXISTS "public"."post_likes" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "post_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."post_likes" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "full_name" "text",
    "avatar_url" "text",
    "id" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."reply_likes" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "target_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."reply_likes" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."todays_likes" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "target_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."todays_likes" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."users" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "user_name" character varying NOT NULL,
    "profile_id" character varying NOT NULL,
    "bio" "text",
    "icon_image_url" "text",
    "follow" integer DEFAULT 0 NOT NULL,
    "followed" integer DEFAULT 0 NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "deleted_at" timestamp with time zone,
    "is_private" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."users" OWNER TO "postgres";


COMMENT ON TABLE "public"."users" IS 'User profile';



CREATE TABLE IF NOT EXISTS "public"."users_artists" (
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "artist_id" bigint NOT NULL
);


ALTER TABLE "public"."users_artists" OWNER TO "postgres";


ALTER TABLE ONLY "public"."mlogs"
    ADD CONSTRAINT "article_pkey" PRIMARY KEY ("mlog_id");



ALTER TABLE ONLY "public"."artists"
    ADD CONSTRAINT "artists_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."blocks"
    ADD CONSTRAINT "blocks_pkey" PRIMARY KEY ("blocker_id");



ALTER TABLE ONLY "public"."follows"
    ADD CONSTRAINT "follows_pkey" PRIMARY KEY ("follower_id", "followed_id");



ALTER TABLE ONLY "public"."generals"
    ADD CONSTRAINT "general_pkey" PRIMARY KEY ("general_id");



ALTER TABLE ONLY "public"."livereports"
    ADD CONSTRAINT "livereports_pkey" PRIMARY KEY ("livereport_id");



ALTER TABLE ONLY "public"."mlog_comments"
    ADD CONSTRAINT "mlog_comments_pkey" PRIMARY KEY ("user_id", "target_id");



ALTER TABLE ONLY "public"."mlog_likes"
    ADD CONSTRAINT "mlog_likes_pkey" PRIMARY KEY ("target_id", "user_id");



ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_pkey" PRIMARY KEY ("notification_id");



ALTER TABLE ONLY "public"."playlist_musics"
    ADD CONSTRAINT "playlist_musics_pkey" PRIMARY KEY ("playlist_id", "music_id");



ALTER TABLE ONLY "public"."music_playlist"
    ADD CONSTRAINT "playlist_pkey" PRIMARY KEY ("playlist_id");



ALTER TABLE ONLY "public"."playlists"
    ADD CONSTRAINT "playlists_pkey" PRIMARY KEY ("mlog_playlist_id");



ALTER TABLE ONLY "public"."post_likes"
    ADD CONSTRAINT "post_likes_pkey" PRIMARY KEY ("user_id", "post_id");



ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "post_pkey" PRIMARY KEY ("entry_id");



ALTER TABLE ONLY "public"."reply_likes"
    ADD CONSTRAINT "reply_likes_pkey" PRIMARY KEY ("user_id", "target_id");



ALTER TABLE ONLY "public"."replies"
    ADD CONSTRAINT "reply_pkey" PRIMARY KEY ("entry_id");



ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "review_pkey" PRIMARY KEY ("review_id");



ALTER TABLE ONLY "public"."todays_likes"
    ADD CONSTRAINT "todays_likes_pkey" PRIMARY KEY ("user_id", "target_id");



ALTER TABLE ONLY "public"."todays"
    ADD CONSTRAINT "todays_song_pkey" PRIMARY KEY ("todays_song_id");



ALTER TABLE ONLY "public"."users_artists"
    ADD CONSTRAINT "users_artists_pkey" PRIMARY KEY ("user_id", "artist_id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."mlog_comments"
    ADD CONSTRAINT "ArticleComment_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."mlogs"
    ADD CONSTRAINT "Article_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."blocks"
    ADD CONSTRAINT "Blocks_BlockedID_fkey" FOREIGN KEY ("blocked_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."blocks"
    ADD CONSTRAINT "Blocks_BlockerID_fkey" FOREIGN KEY ("blocker_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."follows"
    ADD CONSTRAINT "Follows_FollowedID_fkey" FOREIGN KEY ("followed_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."follows"
    ADD CONSTRAINT "Follows_FollowerID_fkey" FOREIGN KEY ("follower_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."post_likes"
    ADD CONSTRAINT "Likes_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."livereports"
    ADD CONSTRAINT "LiveReport_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."playlists"
    ADD CONSTRAINT "PlaylistArticle_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."music_playlist"
    ADD CONSTRAINT "Playlist_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."posts"
    ADD CONSTRAINT "PostAndComment_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."replies"
    ADD CONSTRAINT "Reply_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "Review_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."todays"
    ADD CONSTRAINT "Today'sSong_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."todays_likes"
    ADD CONSTRAINT "TodaysSongLikes_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "Users_UserID_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."mlog_likes"
    ADD CONSTRAINT "article_likes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."generals"
    ADD CONSTRAINT "general_playlist_id_fkey" FOREIGN KEY ("playlist_id") REFERENCES "public"."music_playlist"("playlist_id");



ALTER TABLE ONLY "public"."generals"
    ADD CONSTRAINT "generals_general_id_fkey" FOREIGN KEY ("general_id") REFERENCES "public"."mlogs"("mlog_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."generals"
    ADD CONSTRAINT "generals_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."livereports"
    ADD CONSTRAINT "live_report_playlist_id_fkey" FOREIGN KEY ("playlist_id") REFERENCES "public"."music_playlist"("playlist_id");



ALTER TABLE ONLY "public"."livereports"
    ADD CONSTRAINT "livereports_livereport_id_fkey" FOREIGN KEY ("livereport_id") REFERENCES "public"."mlogs"("mlog_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."mlog_comments"
    ADD CONSTRAINT "mlog_comments_target_id_fkey" FOREIGN KEY ("target_id") REFERENCES "public"."mlogs"("mlog_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."mlog_likes"
    ADD CONSTRAINT "mlog_likes_target_id_fkey" FOREIGN KEY ("target_id") REFERENCES "public"."mlogs"("mlog_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."notifications"
    ADD CONSTRAINT "notifications_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."playlists"
    ADD CONSTRAINT "playlist_article_playlist_id_fkey" FOREIGN KEY ("mlog_playlist_id") REFERENCES "public"."music_playlist"("playlist_id");



ALTER TABLE ONLY "public"."playlist_musics"
    ADD CONSTRAINT "playlist_songs_playlist_id_fkey" FOREIGN KEY ("playlist_id") REFERENCES "public"."music_playlist"("playlist_id");



ALTER TABLE ONLY "public"."playlists"
    ADD CONSTRAINT "playlists_mlog_playlist_id_fkey" FOREIGN KEY ("mlog_playlist_id") REFERENCES "public"."mlogs"("mlog_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."post_likes"
    ADD CONSTRAINT "post_likes_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."posts"("entry_id");



ALTER TABLE ONLY "public"."reply_likes"
    ADD CONSTRAINT "reply_likes_target_id_fkey" FOREIGN KEY ("target_id") REFERENCES "public"."replies"("entry_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."reply_likes"
    ADD CONSTRAINT "reply_likes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."replies"
    ADD CONSTRAINT "reply_parent_id_fkey" FOREIGN KEY ("parent_post_id") REFERENCES "public"."posts"("entry_id");



ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "review_playlist_id_fkey" FOREIGN KEY ("playlist_id") REFERENCES "public"."music_playlist"("playlist_id");



ALTER TABLE ONLY "public"."reviews"
    ADD CONSTRAINT "reviews_review_id_fkey" FOREIGN KEY ("review_id") REFERENCES "public"."mlogs"("mlog_id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."todays_likes"
    ADD CONSTRAINT "todays_song_likes_todays_song_id_fkey" FOREIGN KEY ("target_id") REFERENCES "public"."todays"("todays_song_id");



ALTER TABLE ONLY "public"."users_artists"
    ADD CONSTRAINT "users_artists_artist_id_fkey" FOREIGN KEY ("artist_id") REFERENCES "public"."artists"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."users_artists"
    ADD CONSTRAINT "users_artists_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Basic-ArticleComment" ON "public"."mlog_comments" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Articlelikes" ON "public"."mlog_likes" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Blocks" ON "public"."blocks" USING (true) WITH CHECK (("auth"."uid"() = "blocker_id"));



CREATE POLICY "Basic-Follows" ON "public"."follows" USING (true) WITH CHECK (("auth"."uid"() = "follower_id"));



CREATE POLICY "Basic-Livereport" ON "public"."livereports" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Playlist" ON "public"."music_playlist" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Playlist" ON "public"."playlists" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-PlaylistSongs1" ON "public"."playlist_musics" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."music_playlist"
  WHERE (("music_playlist"."playlist_id" = "playlist_musics"."playlist_id") AND ("music_playlist"."user_id" = "auth"."uid"())))));



CREATE POLICY "Basic-PlaylistSongs2" ON "public"."playlist_musics" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."music_playlist"
  WHERE (("music_playlist"."playlist_id" = "playlist_musics"."playlist_id") AND ("music_playlist"."user_id" = "auth"."uid"())))));



CREATE POLICY "Basic-PlaylistSongs3" ON "public"."playlist_musics" USING (true);



CREATE POLICY "Basic-Post" ON "public"."posts" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Reply" ON "public"."replies" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Review" ON "public"."reviews" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Today'sSongs" ON "public"."todays" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Basic-Users" ON "public"."users" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Post-Blocked" ON "public"."posts" FOR SELECT USING ((NOT (EXISTS ( SELECT 1
   FROM "public"."blocks"
  WHERE (("blocks"."blocked_id" = "auth"."uid"()) AND ("blocks"."blocker_id" = "posts"."user_id"))))));



CREATE POLICY "Post-Blocks" ON "public"."posts" FOR SELECT USING ((NOT (EXISTS ( SELECT 1
   FROM "public"."blocks"
  WHERE (("blocks"."blocker_id" = "auth"."uid"()) AND ("blocks"."blocked_id" = "posts"."user_id"))))));



ALTER TABLE "public"."artists" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "basic policy to Article" ON "public"."generals" USING (true) WITH CHECK (("auth"."uid"() = "user_id"));



ALTER TABLE "public"."blocks" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."follows" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."generals" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."livereports" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."mlog_comments" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."mlog_likes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."mlogs" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."music_playlist" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."notifications" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."playlist_musics" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."playlists" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."post_likes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."posts" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."replies" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reply_likes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."reviews" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."todays" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."todays_likes" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."users_artists" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."posts";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."todays";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
































































































































































































GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";





















GRANT ALL ON TABLE "public"."mlog_likes" TO "anon";
GRANT ALL ON TABLE "public"."mlog_likes" TO "authenticated";
GRANT ALL ON TABLE "public"."mlog_likes" TO "service_role";



GRANT ALL ON SEQUENCE "public"."ArticleLikes_ArticleID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."ArticleLikes_ArticleID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."ArticleLikes_ArticleID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."mlogs" TO "anon";
GRANT ALL ON TABLE "public"."mlogs" TO "authenticated";
GRANT ALL ON TABLE "public"."mlogs" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Article_ArticleID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Article_ArticleID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Article_ArticleID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."generals" TO "anon";
GRANT ALL ON TABLE "public"."generals" TO "authenticated";
GRANT ALL ON TABLE "public"."generals" TO "service_role";



GRANT ALL ON SEQUENCE "public"."General_ArticleID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."General_ArticleID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."General_ArticleID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."livereports" TO "anon";
GRANT ALL ON TABLE "public"."livereports" TO "authenticated";
GRANT ALL ON TABLE "public"."livereports" TO "service_role";



GRANT ALL ON SEQUENCE "public"."LiveReport_LiveReportID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."LiveReport_LiveReportID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."LiveReport_LiveReportID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."playlist_musics" TO "anon";
GRANT ALL ON TABLE "public"."playlist_musics" TO "authenticated";
GRANT ALL ON TABLE "public"."playlist_musics" TO "service_role";



GRANT ALL ON SEQUENCE "public"."PlaylistSongs_PlaylistID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."PlaylistSongs_PlaylistID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."PlaylistSongs_PlaylistID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."music_playlist" TO "anon";
GRANT ALL ON TABLE "public"."music_playlist" TO "authenticated";
GRANT ALL ON TABLE "public"."music_playlist" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Playlist_PlaylistID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Playlist_PlaylistID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Playlist_PlaylistID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."posts" TO "anon";
GRANT ALL ON TABLE "public"."posts" TO "authenticated";
GRANT ALL ON TABLE "public"."posts" TO "service_role";



GRANT ALL ON SEQUENCE "public"."PostAndComment_EntryID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."PostAndComment_EntryID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."PostAndComment_EntryID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."replies" TO "anon";
GRANT ALL ON TABLE "public"."replies" TO "authenticated";
GRANT ALL ON TABLE "public"."replies" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Reply_EntryID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Reply_EntryID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Reply_EntryID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."reviews" TO "anon";
GRANT ALL ON TABLE "public"."reviews" TO "authenticated";
GRANT ALL ON TABLE "public"."reviews" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Review_LiveReportID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Review_LiveReportID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Review_LiveReportID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."todays" TO "anon";
GRANT ALL ON TABLE "public"."todays" TO "authenticated";
GRANT ALL ON TABLE "public"."todays" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Today'sSong_Today'sSongID_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Today'sSong_Today'sSongID_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Today'sSong_Today'sSongID_seq" TO "service_role";



GRANT ALL ON TABLE "public"."artists" TO "anon";
GRANT ALL ON TABLE "public"."artists" TO "authenticated";
GRANT ALL ON TABLE "public"."artists" TO "service_role";



GRANT ALL ON SEQUENCE "public"."artists_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."artists_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."artists_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."blocks" TO "anon";
GRANT ALL ON TABLE "public"."blocks" TO "authenticated";
GRANT ALL ON TABLE "public"."blocks" TO "service_role";



GRANT ALL ON TABLE "public"."follows" TO "anon";
GRANT ALL ON TABLE "public"."follows" TO "authenticated";
GRANT ALL ON TABLE "public"."follows" TO "service_role";



GRANT ALL ON TABLE "public"."mlog_comments" TO "anon";
GRANT ALL ON TABLE "public"."mlog_comments" TO "authenticated";
GRANT ALL ON TABLE "public"."mlog_comments" TO "service_role";



GRANT ALL ON TABLE "public"."notifications" TO "anon";
GRANT ALL ON TABLE "public"."notifications" TO "authenticated";
GRANT ALL ON TABLE "public"."notifications" TO "service_role";



GRANT ALL ON SEQUENCE "public"."notifications_notification_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."notifications_notification_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."notifications_notification_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."playlists" TO "anon";
GRANT ALL ON TABLE "public"."playlists" TO "authenticated";
GRANT ALL ON TABLE "public"."playlists" TO "service_role";



GRANT ALL ON TABLE "public"."post_likes" TO "anon";
GRANT ALL ON TABLE "public"."post_likes" TO "authenticated";
GRANT ALL ON TABLE "public"."post_likes" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."reply_likes" TO "anon";
GRANT ALL ON TABLE "public"."reply_likes" TO "authenticated";
GRANT ALL ON TABLE "public"."reply_likes" TO "service_role";



GRANT ALL ON TABLE "public"."todays_likes" TO "anon";
GRANT ALL ON TABLE "public"."todays_likes" TO "authenticated";
GRANT ALL ON TABLE "public"."todays_likes" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";



GRANT ALL ON TABLE "public"."users_artists" TO "anon";
GRANT ALL ON TABLE "public"."users_artists" TO "authenticated";
GRANT ALL ON TABLE "public"."users_artists" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
